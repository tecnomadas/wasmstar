{
  "contract_name": "super-star",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "lottery_interval",
      "max_tickets_per_user",
      "nois_proxy",
      "percentage_per_match",
      "ticket_price",
      "treasury_fee"
    ],
    "properties": {
      "lottery_interval": {
        "$ref": "#/definitions/Duration"
      },
      "max_tickets_per_user": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "nois_proxy": {
        "type": "string"
      },
      "percentage_per_match": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "maxItems": 6,
        "minItems": 6
      },
      "ticket_price": {
        "$ref": "#/definitions/Coin"
      },
      "treasury_fee": {
        "$ref": "#/definitions/Coin"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u32); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "buy_ticket"
        ],
        "properties": {
          "buy_ticket": {
            "type": "object",
            "required": [
              "lottery_id",
              "tickets"
            ],
            "properties": {
              "lottery_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "tickets": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim_lottery"
        ],
        "properties": {
          "claim_lottery": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "execute_lottery"
        ],
        "properties": {
          "execute_lottery": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "type": "object",
            "required": [
              "callback"
            ],
            "properties": {
              "callback": {
                "$ref": "#/definitions/NoisCallback"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "HexBinary": {
        "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "NoisCallback": {
        "description": "This must be accepted in an `Receive { callback: NoisCallback }` enum case in the ExecuteMsg of the app.",
        "type": "object",
        "required": [
          "job_id",
          "randomness"
        ],
        "properties": {
          "job_id": {
            "description": "The ID chosen by the caller for this job. Use this field to map responses to requests.",
            "type": "string"
          },
          "randomness": {
            "$ref": "#/definitions/HexBinary"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_lottery"
        ],
        "properties": {
          "get_lottery": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_current_lottery"
        ],
        "properties": {
          "get_current_lottery": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "check_winner"
        ],
        "properties": {
          "check_winner": {
            "type": "object",
            "required": [
              "addr",
              "lottery_id"
            ],
            "properties": {
              "addr": {
                "type": "string"
              },
              "lottery_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "check_winner": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_TicketResult",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TicketResult"
      },
      "definitions": {
        "TicketResult": {
          "type": "object",
          "required": [
            "matches",
            "prediction",
            "ticket_number"
          ],
          "properties": {
            "matches": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "prediction": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            },
            "ticket_number": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_current_lottery": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Lottery",
      "type": "object",
      "required": [
        "end_time",
        "id",
        "status",
        "ticket_price",
        "total_prize",
        "total_tickets"
      ],
      "properties": {
        "end_time": {
          "$ref": "#/definitions/Expiration"
        },
        "id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "prize_per_match": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Uint128"
          },
          "maxItems": 6,
          "minItems": 6
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "ticket_price": {
          "$ref": "#/definitions/Coin"
        },
        "total_prize": {
          "$ref": "#/definitions/Coin"
        },
        "total_tickets": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "winner_number": {
          "type": [
            "string",
            "null"
          ]
        },
        "winners_per_match": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "maxItems": 6,
          "minItems": 6
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Status": {
          "type": "string",
          "enum": [
            "open",
            "pending",
            "claimable"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u32); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u32 that is using strings for JSON encoding/decoding, such that the full u32 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u32` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u32); assert_eq!(a.u32(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u32(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_lottery": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Lottery",
      "type": "object",
      "required": [
        "end_time",
        "id",
        "status",
        "ticket_price",
        "total_prize",
        "total_tickets"
      ],
      "properties": {
        "end_time": {
          "$ref": "#/definitions/Expiration"
        },
        "id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "prize_per_match": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Uint128"
          },
          "maxItems": 6,
          "minItems": 6
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "ticket_price": {
          "$ref": "#/definitions/Coin"
        },
        "total_prize": {
          "$ref": "#/definitions/Coin"
        },
        "total_tickets": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "winner_number": {
          "type": [
            "string",
            "null"
          ]
        },
        "winners_per_match": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "maxItems": 6,
          "minItems": 6
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Status": {
          "type": "string",
          "enum": [
            "open",
            "pending",
            "claimable"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u32); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u32 that is using strings for JSON encoding/decoding, such that the full u32 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u32` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u32); assert_eq!(a.u32(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u32(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
